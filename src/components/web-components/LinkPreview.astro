<template id='hjs-link-preview-template'>
  <style is:inline>
    #layout {
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      gap: 16px;
    }

    #content {
      display: flex;
      flex-direction: column;
      min-width: 250px;
      max-width: 400px;
      gap: 8px;
    }

    #title {
      font: var(--font_h4);
      color: var(--color_text-white);
      margin: 0;
    }

    #description {
      font: var(--font_body);
      color: var(--color_text-white);
      margin: 0;
    }

    #source {
      font: var(--font_body);
      color: var(--color_accent-yellow);
    }

    #source::before {
      content: attr(href);
    }

    #thumbnail {
      background-color: white;
      border-radius: 16px;
      padding: 8px;
      height: 100px;
      width: auto;
      object-fit: contain;
    }

    #thumbnail:not([src]) {
      display: none;
    }
  </style>
  <article id='layout'>
    <div id='content'>
      <h4 id='title'></h4>
      <p id='description'></p>
      <a id='source'></a>
    </div>
    <img id='thumbnail' />
  </article>
</template>

<script>
  const linkPreviewTemplate = document.querySelector(
    '#hjs-link-preview-template'
  ) as HTMLTemplateElement;

  class LinkPreview extends HTMLElement {
    public constructor() {
      super();

      const content = document.importNode(linkPreviewTemplate.content, true);

      const shadowRoot = this.attachShadow({ mode: 'open' });

      shadowRoot.append(content);

      this.linkTitle = shadowRoot.querySelector('#title') as HTMLHeadingElement;
      this.linkDescription = shadowRoot.querySelector(
        '#description'
      ) as HTMLParagraphElement;
      this.linkSource = shadowRoot.querySelector(
        '#source'
      ) as HTMLAnchorElement;
      this.linkThumbnail = shadowRoot.querySelector(
        '#thumbnail'
      ) as HTMLImageElement;
    }

    public readonly linkTitle: HTMLHeadingElement;

    public readonly linkDescription: HTMLParagraphElement;

    public readonly linkSource: HTMLAnchorElement;

    public readonly linkThumbnail: HTMLImageElement;

    public static observedAttributes = [
      'title',
      'description',
      'source-url',
      'thumbnail-url'
    ];

    public attributeChangedCallback(
      property: string,
      previousValue: string,
      newValue: string
    ): void {
      if (previousValue === newValue) {
        return;
      }

      switch (property) {
        case 'title': {
          this.linkTitle.textContent = newValue;
          break;
        }

        case 'description': {
          this.linkDescription.textContent = newValue;
          break;
        }

        case 'source-url': {
          this.linkSource.href = new URL(newValue).host;
          break;
        }

        case 'thumbnail-url': {
          this.linkThumbnail.src = newValue;
          break;
        }
      }
    }
  }

  customElements.define('hjs-link-preview', LinkPreview);
</script>
